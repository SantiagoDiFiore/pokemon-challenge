import Head from "next/head";

import axios from "axios";
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
} from "@chakra-ui/react";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";
import FavoritePokemon from "@/components/FavoriteButton";
import SearchPokemon from "@/components/SearchButton";

export default function Home() {
  const pokemonDataModal = useDisclosure();

  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [currentPage, setCurrentPage] = useState(
    "https://pokeapi.co/api/v2/pokemon/?limit=20&offset=0"
  );

  useEffect(() => {
    setIsLoading(true);
    axios.get(currentPage).then(async ({ data }) => {
      const promises = data.results.map((result) => axios(result.url));
      const fetchedPokemon = (await Promise.all(promises)).map(
        (res) => res.data
      );
      setPokemon((prev) => [...prev, ...fetchedPokemon]);
      setIsLoading(false);
    });
  }, [currentPage]);

  function isMobile() {
    return window.innerWidth <= 425;
  }

  async function handleNextPage() {
    if (!currentPage) return;

    setIsLoading(true);
    try {
      const response = await axios.get(currentPage);
      const nextUrl = response.data.next;

      if (nextUrl) {
        setCurrentPage(nextUrl);
      } else {
        setCurrentPage(null);
      }
    } catch (error) {
      console.error("Error al cargar la siguiente pÃ¡gina:", error);
    } finally {
      setIsLoading(false);
    }
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        alignItems="center"
        minH="100vh"
        justifyContent="center"
        direction="column"
      >
        <Container maxW="container.lg">
          <Stack p="5" alignItems="center" spacing="5">
            <SimpleGrid
              spacing="5"
              columns={{ base: !isMobile ? 1 : 2, md: 5 }}
            >
              {pokemon.map((pokemon) => (
                <Box
                  as="button"
                  key={pokemon.id}
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <PokemonCard pokemon={pokemon} />
                </Box>
              ))}
            </SimpleGrid>

            <Button isLoading={false} onClick={handleNextPage}>
              Load More
            </Button>
          </Stack>
        </Container>
      </Flex>
      <SearchPokemon />
      <FavoritePokemon />
      <Modal {...pokemonDataModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader textTransform="capitalize">
            {selectedPokemon?.name}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedPokemon && <PokemonData pokemon={selectedPokemon} />}
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
}
